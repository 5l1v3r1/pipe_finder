#!/bin/bash
# Pipe Finder 1.0
# Script Denveloped by peterpt
# http://github.com/peterpt

green='\033[92m'
yellow='\e[0;33m'
orange='\e[38;5;166m'
white='\e[0;49;37m'

path=$(pwd)
rm -f $path/msf.rc >/dev/null 2>&1
rm -f $path/msfout.log >/dev/null 2>&1
rm -f $path/pid.tmp >/dev/null 2>&1
rm -f $path/tmp.txt >/dev/null 2>&1
trap ctrl_c INT
function ctrl_c() {
if [[ -f "$path/pid.tmp" ]]
then
PID=$(cat $path/pid.tmp)
if [[ -z "$PID" ]]
then
exit 1
else
kill -9 $PID &>/dev/null
rm -f msf.rc >/dev/null 2>&1
rm -f msfout.log >/dev/null 2>&1
rm -f pid.tmp >/dev/null 2>&1
rm -f tmp.txt >/dev/null 2>&1
fi
else
exit 1
fi
}
chkdep() {
which msfconsole > /dev/null 2>&1
      if [ "$?" -eq "1" ]; then
   echo -e "$red" "Metasploit Framework Missing"
echo ""
echo -e "$yellow" "Try : apt-get install metasploit-framework"
exit 1
fi  
}
logo (){
vrs="1.0"
echo -e "$green"' ______ _                _______ _           _'             
echo -e "$green"'(_____ (_)              (_______|_)         | |      '      
echo -e "$green"' _____) ) ____  _____    _____   _ ____   __| |_____  ____' 
echo -e "$green"'|  ____/ |  _ \| ___ |  |  ___) | |  _ \ / _  | ___ |/ ___)'
echo -e "$green"'| |    | | |_| | ____|  | |     | | | | ( (_| | ____| |    '
echo -e "$green"'|_|    |_|  __/|_____)  |_|     |_|_| |_|\____|_____)_|    '
echo -e "$green""         |_|                                              $yellow Release :$green $vrs "
echo -e "$orange""Denveloped by : Peterpt (http://github.com/peterpt)"
}
minstall(){
msfloc=$(locate metasploit-framework/modules/auxiliary/scanner/smb | sed -n 1p )
if [[ -z "$msfloc" ]]
then
echo -e "$yellow""Unable to find metasploit folder"
exit 1
else
if [[ ! -f "$msfloc/pipe_audit_v2.rb" ]]
then
echo -e "$yellow""Pipe Finder was unable to find pipe_audit_v2.rb module"
echo -e "$yellow""in :$green $msfloc"
echo ""
echo -e "$orange""Do you want to install this ruby module in your metasploit folder ? (y/n)"
read -r choice
case $choice in
y|Y|yes|Yes)
wget https://raw.githubusercontent.com/peterpt/pipe_auditor_fb/master/pipe_audit_v2.rb -O $msfloc/pipe_audit_v2.rb > /dev/null 2>&1
if [[ ! -f "$msfloc/pipe_audit_v2.rb" ]]
then
echo -e "$yellow""There was a problem downloading this module"
exit 1
else
echo -e "$green""Module installed succefully"
fi
;;
n|N|NO|No)
echo -e "$yellow""Pipe Finder is unable to work without this module ."
exit 1
;;
*)
echo -e "$yellow""Invalid choice"
exit 1
;;
esac
fi
fi
}
ipi(){
echo ""
echo -ne "$green""Enter IP to Scan : "
read ip
if [[ -z "$ip" ]]
then
echo -e "$yellow""Empty Input !!"
exit 1
fi
}
scan(){
echo "spool $path/msfout.log" > $path/msf.rc
echo "use auxiliary/scanner/smb/pipe_audit_v2" >> $path/msf.rc
echo "set rhosts $ip" >> $path/msf.rc
echo "exploit" >> $path/msf.rc
echo "quit -y" >> $path/msf.rc
msfconsole -r $path/msf.rc >/dev/null 2>&1
echo ""
pipe=$(cat msfout.log | grep "Pipes" | sed -e "s/:445//g" |awk '{$1=$3=""; print $0}')
if [[ -z "$pipe" ]]
then
echo -e "$yellow""No pipe names found on $ip scan"
else
echo -e "$orange""Pipes found in $ip""$green"
echo $pipe
if [[ ! -z "$out" ]]
then
echo "$pipe" >> "$out"
fi
fi
rm -f $path/msf.rc >/dev/null 2>&1
rm -f $path/msfout.log >/dev/null 2>&1
echo ""
echo -e "$green""Finished"
exit 1
}
chklog(){
echo -e "$white" ""
PID=$(cat $path/pid.tmp)
ps --pid "$PID" &>/dev/null
pd="$?"
if [ "$pd" == "1" ]
then
echo ""
echo -e "$green""Scanner Finished"
rm -f msf.rc >/dev/null 2>&1
rm -f msfout.log >/dev/null 2>&1
rm -f pid.tmp >/dev/null 2>&1
rm -f tmp.txt >/dev/null 2>&1
exit 1
fi
if [[ "$tm" == "20" ]]
then
kill -9 $PID
echo -e "$yellow""No msflog generated"
exit 1
fi
if [[ ! -f "$path/msfout.log" ]]
then
sleep 1
tm=$((tm+1))
chklog
fi
tm="19"
pipe=$(cat msfout.log | grep "Pipes" | tail -1 | sed -e "s/:445//g" | awk '{$1=$3=""; print $0}')
if [[ "$pipe" == "$ot" ]]
then
sleep 1
chklog
else
echo "$pipe"
if [[ ! -z "$out" ]]
then
echo "$pipe" >> "$out"
fi
echo ""
ot="$pipe"
chklog
fi
}

escanfscan(){
echo "spool $path/msfout.log" > $path/msf.rc
echo "use auxiliary/scanner/smb/pipe_audit_v2" >> $path/msf.rc
paste -sd, "$path/tmp.txt"            \
|sed 's/^/set rhosts /; s/,/, /g'  \
>>$path/msf.rc
echo "exploit" >> $path/msf.rc
echo "quit -y" >> $path/msf.rc
tm="0"
ot=""
pipe=""
msfconsole -r $path/msf.rc >/dev/null 2>&1 & echo $! > $path/pid.tmp & chklog
}

help() {
echo "Pipe Finder 1.0 - 2017"
echo "------------------------------------"
echo "Available Switches :"
echo ""
echo "-i 192.168.1.34 (check for pipe names on specific ip)"
echo "-es (check Eternal Scanner ip list (case exists) for pipe names )"
echo "-o (creates an output file)"
echo "-h (This screen)"
echo ""
echo "Example : pipef -i 192.168.1.20 -o /ipipes.txt"
exit 1
}
if [ -z "$1" ]
then
chkdep
minstall
logo
ipi
scan
fi

if [ "$1" == "-h" ]
then
help
fi
if [ "$1" == "-es" ]
then
out=""
if [ "$2" == "-o" ]
then
if [[ -z "$3" ]]
then
echo -e "$yellow""No output specified , displaying output only"
out=""
else
out="$3" 
fi
fi
esdir="/usr/local/share/Eternal_Scanner/vuln.txt"
if [[ ! -f "$esdir" ]]
then
echo -e "$yellow""Eternal Scanner Vulnerable ip list not found"
echo ""
echo -e "$yellow""Check :$green (https://github.com/peterpt/eternal_scanner)"
echo -e "$yellow""To install it"
exit 1
else
gesl=$(tail -n+3 $esdir | sed -e "s/:445//g" > $path/tmpes.txt)
tr " " "\n" <$path/tmpes.txt >tmp.txt
rm -f $path/tmpes.txt >/dev/null 2>&1
chkdep
minstall
logo
echo -e "$green""Checking : $esdir , for SMB pipe names"
echo
escanfscan
fi
fi



if [ "$1" == "-i" ]
then
if [ -z "$2" ]
then
help
echo -e "$yellow" "Value missing"
echo ""
echo -e "$green" "Try (pipef -i 192.168.1.1)"
exit 1
else
if [ "$3" == "-o" ]
then
if [[ -z "$4" ]]
then
echo -e "$yellow""No output specified , displaying output only"
out=""
else
out="$4" 
fi
fi
ip="$2"
chkdep
minstall
logo
echo -e "$green""Checking $ip for SMB Pipe Names"
echo ""
scan
fi
fi
